// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	book "yusnar/clean-arch/features/book"

	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the RepositoryInterface type
type BookRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *BookRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *BookRepository) GetAll() ([]book.Core, error) {
	ret := _m.Called()

	var r0 []book.Core
	if rf, ok := ret.Get(0).(func() []book.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]book.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *BookRepository) GetById(id int) (book.Core, error) {
	ret := _m.Called(id)

	var r0 book.Core
	if rf, ok := ret.Get(0).(func(int) book.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(book.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: input
func (_m *BookRepository) Insert(input book.Core) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(book.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: id, input
func (_m *BookRepository) Update(id int, input book.Core) error {
	ret := _m.Called(id, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, book.Core) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBookRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookRepository(t mockConstructorTestingTNewBookRepository) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
